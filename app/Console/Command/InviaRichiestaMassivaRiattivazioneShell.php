<?php

App::uses('CakeEmail', 'Network/Email');
App::uses('ComponentCollection', 'Controller');
App::uses('ClientiUtilComponent', 'Controller/Component'); // su shell non posso caricarlo con public $components ...

class InviaRichiestaMassivaRiattivazioneShell extends AppShell {
    
    public $uses = array(
		'Cliente', 
		'CartaDiCredito', 
		'Recapito', 	
	);
	
	 public function startup() {
		 // su shell non posso caricare i components via public $components, devo usare un'altra via (https://stackoverflow.com/questions/28511023/how-to-load-a-component-in-console-shell - uno degli ultimi commenti)
        $collection = new ComponentCollection();
        $this->ClientiUtil = $collection->load('ClientiUtil');
    }
    
    public function main() {

// sono la base dei clienti da cui scegliere quelli a cui re-inviare il link di attivazione		
		$clientiDebitori = [
10902,
13081,
9599,
149,
12118,
11205,
12307,
12763,
1512,
13053,
10848,
10971,
8908,
7348,
11159,
10039,
12443,
8469,
12937,
12684,
12740,
10041,
12196,
12755,
12367,
10218,
13077,
9022,
13127,
12805,
2083,
7635,
7774,
13058,
7746,
8497,
13124,
3897,
10772,
9939,
8290,
12461,
12840,
12669,
8659,
8922,
8381,
9157,
3052,
9038,
11837,
12952,
1379,
6769,
8231,
8489,
9162,
9401,
12569,
7608,
12754,
13126,
12658,
13118,
13114,
13125,
12813,
11050,
13102,
12651,
10380,
13100,
12832,
12351,
13076,
13117,
13139,
13096,
9488,
12536,
13011,
11582,
12815,
12597,
8717,
11647,
5726,
12676,
3278,
5870,
11824,
11566,
11155,
10737,
7369,
12062,
13093,
11842,
10989,
9014,
13046,
12451,
4769,
11943,
10076,
12439,
7838,
7846,
5372,
12993,
13070,
12827,
10749,
6555,
12642,
8149,
11736,
8648,
13106,
11037,
11335,
9644,
7202,
6456,
171,
12977,
12880,
10636,
11263,
12529,
46,
9819,
10814,
12895,
8399,
12742,
5532,
10777,
13128,
10743,
10647,
3651,
12630,
10331,
11138,
11898,
10035,
12848,
3875,
856,
6012,
8813,
422,
13123,
9242,
12936,
2229,
13068,
5813,
12053,
12573,
8342,
3615,
5793,
12849,
12963,
12186,
10453,
10991,
12775,
13107,
8890,
2992,
12779,
13122,
5351,
12748,
12817,
4689,
9333,
8849,
8233,
12944,
8988,
4925,
8553,
8148,
10344,
7176,
12387,
13120,
13095,
2475,
12928,
13101,
13086,
3063,
13061,
6697,
13098,
6606,
6422,
1674,
10968,
12577,
3560,
3627,
13054,
12906,
13113,
12852,
4262,
3632,
13116,
9780,
2337,
8511,
12023,
979,
10483,
3935,
9280,
5662,
10486,
10957,
12724,
12860,
11054,
10317,
12872,
13074,
12635,
12391,
12921,
5014,
13119,
6421,
6665,
13099,
9089,
4794,
13082,
7544,
10830,
9503,
8383,
10687,
12876,
12627,
6682,
13010,
10624,
11179,
12324,
9927,
6441,
13121,
2581,
1458,
11949,
5839,
1629,
3401,
9012,
2416,
12452,
558,
11891,
11047,
13091,
12234,
7400,
5228,
12458,
8982,
11032,
11740,
7812,
3472,
11767,
11048,
13079,
12800,
12499,
12820,
12783,
10296,
3630,
3891,
10280,
12281,
8265,
10287,
12756,
10447,
11557,
7112,
12980,
1732,
1386,
5651,
3987,
7008,
2068,
12352,
8516,
13065,
6023,
10704,
12395,
13085,
9363,
9745,
13055,
13103,
13069,
13088,
13062,
13092,
13030,
10423,
674,
5007,
6750,
10896,
10634,
7826,
11895,
11189,
7244,
10976,
1870,
9462,
1884,
11415,
7395,
8293,
10708,
12340,
7414,
5174,
12097,
12933,
7194,
2854,
9262,
9593,
12983,
11302,
8945,
5652,
1017,
4244,
12308,
3034,
8990,
12950,
10609,
12696,
11835,
12909,
12287,
12218,
4227,
11326,
5911,
12911,
9978,
9127,
10854,
84,
12102,
10550,
10981,
9234,
8135,
10577,
12828,
12932,
11077,
13035,
9456,
5542,
10796,
11987,
12680,
12479,
10760,
9837,
12420,
406,
3672,
4760,
11694,
9820,
2978,
11225,
4859,
11279,
10531,
6471,
10351,
12483,
1412,
11581,
12949,
12785,
10716,
11059,
9198,
3000,
3820,
11996,
10986,
12496,
4195,
12396,
5620,
7345,
5321,
11406,
13108,
4647,
3868,
10844,
7212,
12553,
12984,
7060,
4893,
12896,
12907,
3921,
894,
7569,
13067,
3670,
6469,
11381,
12902,
1754,
2991,
10385,
7848,
8874,
9959,
3306,
3161,
13031,
11366,
7811,
12970,
1581,
2931,
13090,
9467,
12633,
6468,
12501,
12824,
10688,
5595,
12296,
7001,
4825,
11635,
2051,
3760,
9452,
3749,
11432,
12761,
10785,
12773,
13044,
3500,
10941,
12514,
2769,
6040,
11053,
12167,
2616,
12593,
12504,
5363,
7045,
11609,
6235,
10020,
9370,
12454,
10470,
2568,
12707,
13110,
13087,
7573,
12753,
3073,
8746,
3839,
8620,
6303,
9554,
8721,
1104,
2542,
3444,
12434,
11150,
4594,
4505,
12997,
10820,
10686,
4014,
12342,
13094,
5858,
13109,
12286,
8839,
12702,
11217,
12881,
11293,
1296,
3602,
7071,
686,
9940,
12400,
12653,
6659,
10080,
12523,
12821,
10867,
12077,
4182,
7278,
13071,
3308,
4854,
4002,
6995,
11091,
2537,
2865,
11491,
11240,
10131,
12842,
10184,
8127,
7087,
2668,
13080,
12180,
10430,
9361,
12807,
8796,
10322,
12898,
2476,
12890,
12966,
12208,
12901,
12580,
188,
5359,
10680,
8119,
11896,
12430,
9540,
3694,
10632,
10950,
11779,
2352,
12672,
11906,
7783,
12178,
6540,
10058,
8956,
9699,
8967,
11359,
11218,
11163,
1598,
12656,
5092,
9337,
9795,
6863,
12127,
12334,
12810,
8882,
11313,
5068,
12674,
5361,
11067,
8538,
7713,
12818,
12335,
12486,
3996,
5481,
8756,
5367,
13083,
11661,
4857,
12873,
12965,
11141,
12900,
7528,
10753,
12925,
301,
11803,
12981,
8944,
2195,
2895,
10621,
12016,
13078,
10307,
13084,
9794,
12926,
12450,
8480,
6937,
11850,
8889,
1484,
11857,
8167,
5972,
12623,
6199,
12979,
12498,
8260,
3141,
4806,
351,
9834,
3787,
5546,
11400,
801,
10359,
12171,
946,
4522,
7558,
1034,
10011,
10478,
11237,
9566,
12519,
11626,
6505,
10769,
12012,
1670,
11950,
12943,
9856,
9585,
12302,
7190,
12086,
10949,
12853,
12995,
7856,
10619,
11416,
11793,
11090,
9630,
6052,
5906,
8951,
6493,
10701,
7028,
12893,
10229,
12237,
10824,
9265,
11423,
1546,
9009,
12686,
1344,
13041,
933,
2014,
11453,
12224,
6294,
9274,
12857,
8674,
11228,
8715,
9475,
5427,
10288,
12964,
7136,
4369,
6417,
3986,
10345,
12447,
6481,
3013,
12960,
8438,
12007,
9609,
5868,
12764,
3695,
10143,
11164,
11563,
12266,
12711,
9991,
10537,
1119,
10427,
12050,
4122,
2487,
8812,
12863,
10271,
4044,
8556,
10653,
11422,
5006,
6553,
11113,
5143,
6875,
12603,
3590,
10628,
6938,
10517,
8716,
10813,
12801,
10435,
146,
12802,
3296,
12467,
6464,
11756,
9445,
3823,
11717,
7255,
11794,
10213,
9249,
10166,
13008,
11900,
1111,
3610,
11801,
10598,
11959,
647,
12806,
4907,
12330,
6795,
7205,
9616,
11592,
10612,
12555,
10098,
3017,
13089,
12962,
7066,
12908,
11364,
11901,
9981,
12924,
8331,
12052,
11669,
12953,
3816,
7810,
8784,
12493,
12855,
584,
10633,
9461,
2173,
9350,
593,
3019,
9627,
4020,
10644,
12777,
7391,
10580,
8061,
12743,
13018,
5195,
5199,
12888,
11285,
10573,
9951,
10542,
12814,
4225,
9636,
12780,
13005,
10618,
12205,
6025,
5196,
451,
12637,
10864,
12018,
10055,
1840,
5243,
3756,
7058,
10997,
13064,
9474,
11255,
8802,
139,
10125,
10505,
1053,
9377,
9068,
11617,
12263,
8388,
4451,
5155,
10547,
9466,
11457,
3076,
11556,
6720,
11843,
10120,
228,
7637,
12505,
7332,
10884,
7029,
5008,
5039,
12912,
8704,
12655,
180,
10519,
5745,
10614,
7262,
6312,
12392,
9825,
9140,
11215,
11176,
6699,
11140,
8222,
11775,
12747,
12879,
1540,
7113,
12717,
1671,
12975,
7198,
2421,
11569,
876,
7785,
1723,
6435,
8234,
6452,
11716,
8447,
6632,
9524,
12664,
12976,
9103,
9076,
12353,
12114,
3383,
9883,
8695,
12695,
12606,
12271,
11936,
4884,
12784,
9567,
5178,
11768,
12585,
2013,
11440,
12941,
11120,
3112,
9568,
9107,
8453,
9728,
7256,
10980,
4005,
12503,
11875,
11805,
11827,
12999,
9577,
11309,
8091,
8557,
10799,
2283,
8836,
7815,
6732,
10306,
7493,
7808,
3403,
9218,
7641,
10670,
8274,
6439,
4213,
9911,
10691,
12440,
12363,
10534,
7253,
11064,
13037,
5410,
6273,
6773,
12410,
7353,
11782,
12113,
10846,
6957,
10928,
2928,
4826,
10929,
11981,
12541,
11721,
12918,
3841,
11723,
4645,
5773,
10626,
9407,
12823,
12306,
10616,
7010,
10858,
11154,
11555,
12297,
10825,
11772,
10186,
11446,
12135,
10710,
3366,
10260,
435,
10780,
3828,
3728,
4568,
12572,
7068,
4772,
11014,
5114,
10827,
13075,
9272,
10233,
7171,
6144,
11242,
1673,
10182,
10404,
4577,
12663,
9631,
8810,
9725,
4167,
11858,
11802,
12581,
10765,
4068,
12719,
11783,
12998,
5529,
5914,
12465,
9854,
789,
10891,
11822,
9385,
9791,
12929,
4154,
7744,
2200,
9095,
12223,
12039,
11036,
12543,
8581,
3601,
11710,
12897,
2979,
1197,
271,
10697,
10797,
11929,
5785,
12910,
4981,
12587,
4912,
1096,
10495,
11003,
13009,
4734,
12737,
6727,
2191,
12382,
1029,
8527,
1454,
3025,
6559,
12160,
13066,
7769,
12769,
4543,
12315,
7124,
10441,
5041,
7143,
4660,
4235,
8685,
4900,
7589,
11377,
6289,
5749,
4672,
8873,
8213,
3134,
6324,
3699,
7562,
196,
2444,
8391,
5048,
11829,
9223,
7170,
12841,
5704,
11171,
5055,
8712,
11833,
8687,
9096,
12794,
12524,
11659,
3253,
9974,
4525,
4810,
429,
10659,
11173,
9441,
12191,
10751,
7700,
5341,
5293,
11787,
12073,
7849,
10995,
1950,
2053,
12991,
11961,
12768,
1812,
13024,
13025,
13072,
3661,
785,
11995,
13073,
12844,
11876,
10843,
512,
3125,
6861,
12417,
8096,
12625,
4379,
13019,
12871,
8530,
10162,
11762,
12163,
12978,
11940,
859,
7377,
6552,
2273,
9723,
10304,
12418,
3036,
11583,
11338,
2144,
11719,
5466,
13111,
9045,
11888,
12883,
11774,
11619,
12958,
5758,
9740,
4694,
13047,
318,
11918,
5385,
3501,
12528,
9670,
6291,
12185,
9633,
7701,
1574,
8473,
13104,
7513,
246,
10391,
3137,
8905,
6647,
1708,
12938,
5200,
9852,
1062,
9673,
10031,
10349,
6534,
1611,
11818,
12579,
5642,
4153,
5089,
11727,
5336,
924,
7602,
6057,
10835,
6431,
5258,
336,
11685,
5144,
750,
6764,
6487,
1254,
9437,
12652,
12291,
12955,
8111,
8646,
3765,
4088,
7461,
3462,
1619,
11904,
3219,
4558,
1464,
11324,
10617,
10690,
5060,
7511,
7405,
7624,
5807,
6549,
8550,
12961,
12209,
7080,
5772,
9877,
10719,
5428,
9058,
1780,
12714,
12917,
8734,
465,
11932,
4107,
9588,
11575,
4197,
91,
13001,
12694,
7694,
12648,
176,
11305,
3039,
6644,
12025,
8857,
5162,
1246,
11654,
12177,
12101,
732,
10579,
10514,
8176,
12886,
10731,
3654,
88,
13002,
372,
11387,
5750,
3795,
10115,
12732,
8338,
12734,
12710,
5715,
12110,
4515,
9055,
8542,
961,
12947,
10703,
9966,
5163,
3227,
4468,
8941,
11190,
10873,
13014,
5804,
7013,
4713,
11252,
302,
6150,
5598,
1755,
6319,
10113,
2795,
10771,
11496,
4560,
8636,
8735,
12887,
11223,
10112,
12537,
12293,
12561,
12552,
12945,
12914,
12520,
2270,
9715,
1280,
12994,
12741,
10717,
2008,
11564,
8367,
1971,
12460,
4666,
2064,
8845,
9122,
10070,
6737,
4676,
10696,
4917,
5256,
5388,
12024,
2148,
12678,
10880,
4573,
10395,
1916,
12693,
9805,
12703,
865,
4024,
5233,
8640,
12161,
5323,
11882,
12636,
12969,
11997,
1413,
11920,
12968,
2667,
1058,
9348,
6109,
2957,
4653,
6797,
9769,
8507,
12809,
930,
5036,
12406,
997,
11874,
11500,
6499,
12716,
11350,
4238,
11732,
10631,
8189,
8201,
12618,
9675,
2743,
11168,
10498,
13012,
12762,
8499,
10554,
11516,
3438,
11676,
4328,
2883,
11082,
5690,
9842,
10723,
4711,
9759,
10831,
10117,
2737,
12036,
12720,
7387,
12424,
9100,
521,
12765,
12770,
7218,
12712,
11281,
6685,
9408,
9479,
12822,
11464,
5000,
1858,
10682,
8287,
5151,
7314,
11297,
6126,
12614,
377,
6317,
12100,
12405,
12083,
7537,
6310,
8137,
2331,
12749,
10927,
2420,
7719,
4629,
13057,
9297,
11183,
6848,
3712,
612,
1205,
12956,
10833,
12837,
434,
3202,
12661,
9672,
12750,
6558,
8476,
1237,
12723,
7351,
4556,
12494,
1586,
2096,
1532,
2669,
7272,
12515,
3068,
992,
7538,
8063,
6045,
9859,
1508,
5965,
11283,
3506,
1109,
9239,
8577,
11068,
12862,
12973,
3108,
587,
12292,
9159,
2688,
11786,
2852,
9712,
1529,
4178,
195,
12094,
440,
4774,
8634,
9706,
8350,
8475,
7763,
6406,
10730,
11735,
3656,
12326,
11031,
10727,
11042,
11543,
1895,
2833,
4704,
11770,
8863,
11815,
12277,
2729,
2682,
1701,
133,
9573,
5587,
12128,
2499,
764,
12338,
12867,
12337,
3599,
9236,
4011,
11046,
4651,
11944,
5080,
3591,
9240,
11841,
5522,
7384,
11667,
10962,
9288,
11745,
9563,
8928,
113,
11889,
5988,
8954,
658,
4771,
9816,
10853,
11766,
5343,
3435,
11166,
9528,
656,
6767,
2723,
703,
8929,
11674,
5405,
971,
9415,
8435,
6059,
4624,
9652,
8152,
5149,
3547,
12231,
100,
10389,
735,
7578,
8396,
5866,
340,
5107,
7827,
4013,
12112,
3653,
9912,
1803,
10350,
3578,
12986,
10246,
7334,
4990,
1506,
6753,
9651,
2032,
1359,
4031,
9112];
		
		CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '. sizeof($clientiDebitori) . ' clienti debitori totali');
		
		$tmp = $this->Cliente->query("SELECT c.id 
			FROM clienti as c 
			WHERE c.id IN (".implode(",",$clientiDebitori).")
			");
		CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '.sizeof($tmp) . ' clienti effettivamente esistenti');
		// ottieni i clienti non esistenti in modo da visualizzarli alla fine
		$clientiEsistenti = [];
		foreach($tmp as $c) {
			$clientiEsistenti[] = $c['c']['id'];
		}
		$clientiNonEsistenti = [];
		foreach($clientiDebitori as $c) {
			if( !in_array($c, $clientiEsistenti) ) {
				$clientiNonEsistenti[] = $c;
			}
		}
		CakeLog::write('warning', '[RIATTIVAZIONE ADYEN] '.sizeof($clientiNonEsistenti) . ' clienti non esistenti: ' . implode(",", $clientiNonEsistenti));
		
		$res1 = $this->Cliente->query("SELECT c.id 
			FROM clienti as c 
			WHERE (c.tipo_metodo_pagamento_attivo_id != 1 or c.tipo_metodo_pagamento_attivo_id is NULL)
			AND c.id IN (".implode(",",$clientiDebitori).")
			");
		CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '.sizeof($res1) . ' clienti debitori con metodo di pagamento attivo diverso da carta');
		
		$res2 = $this->Cliente->query("SELECT c.id 
			FROM clienti as c 
			WHERE c.tipo_metodo_pagamento_attivo_id = 1
			AND c.id IN (".implode(",",$clientiDebitori).")
			");
		CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '.sizeof($res2) . ' clienti debitori con metodo di pagamento attivo carta');
		
		$res3 = $this->Cliente->query("SELECT c.id 
			FROM clienti as c 
			INNER JOIN carte_di_credito AS cc
			ON cc.id = c.metodo_pagamento_attivo_id
			WHERE c.tipo_metodo_pagamento_attivo_id = 1
			AND c.id IN (".implode(",",$clientiDebitori).")
			");
		CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '.sizeof($res3) . ' clienti debitori con metodo di pagamento attivo carta con carta esistente');
		
		// i clienti a cui chiedere la ri-attivazione sono tutti i clienti sopra esclusi:
		// - quelli che non pagano con carta
		// - quelli che si sono già attivati con adyen
		$res = $this->Cliente->query("SELECT c.id 
			FROM clienti as c 
			INNER JOIN carte_di_credito AS cc
			ON cc.id = c.metodo_pagamento_attivo_id
			WHERE c.tipo_metodo_pagamento_attivo_id = 1
			AND c.id IN (".implode(",",$clientiDebitori).")
			AND (
				cc.signed IS NULL
				OR
				cc.adyen_psp_reference IS NULL
			)");
		CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '.sizeof($res) . ' clienti a cui inviare la richiesta di ri-attivazione su adyen');
		$clientiDaRiattivare = [];
		foreach($res as $c) {
			$clientiDaRiattivare[] = $c['c']['id'];
		}
		
		foreach($clientiDaRiattivare as $c) {
			$cliente = $this->Cliente->findById($c);
			// ottieni il contratto carta corrente
			$contratto_carta_attivo = null;
			foreach($cliente['CartaDiCredito'] as $carta) {
				if($cliente['Cliente']['metodo_pagamento_attivo_id'] == $carta['id']) {
					$contratto_carta_attivo = $carta;
					break;
				}
			}
			if( empty($contratto_carta_attivo) ) { // non deve succedere ...
				CakeLog::write('error', '[RIATTIVAZIONE ADYEN] '.'[' . $cliente['Cliente']['id'] .' - ' . $cliente['Cliente']['displayName'] . ']: carta attiva non trovata, skipping');
				continue;
			}
			if( !empty($contratto_carta_attivo['signed']) && !empty($contratto_carta_attivo['adyen_psp_reference']) ) { // non deve succedere
				CakeLog::write('error', '[RIATTIVAZIONE ADYEN] '.'[' . $cliente['Cliente']['id'] .' - ' . $cliente['Cliente']['displayName'] . ']: carta già attiva su adyen, skipping');
				continue;
			}
			// ottieni i recapiti a cui mandare la mail
			$recapiti = $this->ClientiUtil->getRecapitiPerTipo($cliente['Recapito'], 'A');
			if(empty($recapiti)) {
				CakeLog::write('error', '[RIATTIVAZIONE ADYEN] '.'[' . $cliente['Cliente']['id'] .' - ' . $cliente['Cliente']['displayName'] . ']: nessun recapito di tipo A, skipping');
				continue;
			}
			$id_contratto = $contratto_carta_attivo['id_contratto'];
			foreach($recapiti as $recapito) {
				
				if (!filter_var($recapito, FILTER_VALIDATE_EMAIL)) {
					CakeLog::write('error', '[RIATTIVAZIONE ADYEN] '.'[' . $cliente['Cliente']['id'] .' - ' . $cliente['Cliente']['displayName'] . ']: email ' .$recapito. ' non valida, skipping');
					continue;
				}
				// invia mail
				$Email = new CakeEmail('mandrillapp');
				$Email->from(array('mangio@zolle.it' => 'Le Zolle'));
				$Email->to($recapito);
				$Email->subject(__("Le Zolle - pagamento con carta di credito"));
				$Email->setHeaders(array(
					'X-MC-Metadata' => '{"id_cliente": "'.$cliente['Cliente']['id'].'", "id_cliente_fatturazione": "'.$cliente['Cliente']['ID_CLIENTE_FATTURAZIONE'].'"}'
				));
				$Email->emailFormat('html');
				$Email->template('richiesta_riattivazione_su_adyen', 'default');
				// forza https sull'url (lo faccio in modo custom dato che non sembra prendere il protocollo in automatico)
				$urlContratto = Router::url(array('controller' => 'carte_di_credito', 'action' => 'contratto', $id_contratto), true);
				if(strpos($urlContratto, 'https') === false) { // http
					$urlContratto = str_replace('http://', 'https://', $urlContratto);
				}
				
				// forzo l'url direttamente in modo da essere sicuro che parta da mangio.zolle.it (alias sicuro in caso di eventuali modifiche di puntamento al dns)
				$urlContratto = 'https://mangio.zolle.it/carte_di_credito/contratto/'.$id_contratto;
				
				$Email->viewVars(array(
					'nomeCliente' => $cliente['Cliente']['displayName'],
					'urlContratto' => $urlContratto
				));
				$Email->send();
				CakeLog::write('info', '[RIATTIVAZIONE ADYEN] '.'[' . $cliente['Cliente']['id'] .' - ' . $cliente['Cliente']['displayName'] . ']: inviata richiesta per contratto ' . $id_contratto . ' a ' . $recapito);
			
				sleep(1); // per non inondare di richieste mandrill mi fermo un attimo dopo ogni invio
			}

		}
    
    }
    
}
 
